let c;var T=(...[r={}])=>{Object.entries(r).forEach(([e,a])=>Object.defineProperty(r,e,{value:a===!0?y[e]:r[e]}));const{Path:o,Cache:s,Logger:w,Map:n,Exclude:g,Action:m,CSS:u,HTML:S,JavaScript:h,SVG:b,Parser:p}=l(y,r),f=new Set;return typeof o<"u"&&(Array.isArray(o)||o instanceof Set)&&o.forEach(e=>f.add(e)),typeof p=="object"&&Object.entries(p).forEach(([e,a])=>Object.defineProperty(p,e,{value:Array.isArray(a)?a:[a]})),{name:"astro-compress",hooks:{"astro:config:done":async({config:{outDir:{pathname:e}}})=>{c=(await import("path")).parse(e).dir.replace(/\\/g,"/"),c.startsWith("/")&&(c=c.substring(1))},"astro:build:done":async({dir:e})=>{if(console.log(`
${(await import("kleur/colors")).bgGreen((await import("kleur/colors")).black(" AstroCompress processing "))}`),typeof n=="object"){f.add(e),typeof s=="object"&&s.Search===A&&(s.Search=e);for(const[a,i]of Object.entries({CSS:u,HTML:S,JavaScript:h,SVG:b}))if(!(!(i&&n[a])||typeof i!="object")){d=l(m,l(m,{Wrote:async({Buffer:t})=>{switch(a){case"CSS":return(await import("csso")).minify(t.toString(),i.csso).css;case"HTML":return await(await import("html-minifier-terser")).minify(t.toString(),i["html-minifier-terser"]);case"JavaScript":return(await(await import("terser")).minify(t.toString(),i.terser)).code??t;case"SVG":{const{data:j}=(await import("svgo")).optimize(t.toString(),i.svgo);return j??t}default:return t}},Fulfilled:async t=>t.Files>0?`${(await import("kleur/colors")).green(`\u2713 Successfully compressed a total of ${t.Files} ${a} ${t.Files===1?"file":"files"} for ${await(await import("files-pipe/Target/Function/Bytes.js")).default(t.Info.Total)}.`)}`:!1}));for(const t of f)await(await(await(await new(await import("files-pipe")).default(s,w).In(t)).By(n[a]??"**/*")).Not(g)).Pipe(d)}}}}}};const{default:y}=await import("../Variable/Option.js"),{default:{Cache:{Search:A}}}=await import("files-pipe/Target/Variable/Option.js"),{default:l}=await import("../Function/Merge.js");let d;export{y as Default,l as Merge,A as Search,c as System,d as _Action,T as default};
